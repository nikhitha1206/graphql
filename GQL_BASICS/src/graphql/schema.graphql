#union AnimalUnion=Dog|Cat
interface Animal {
  animal: String
  name: String!
}
type Dog implements Animal {
  animal: String
  name: String!
  hair: String!
}
type Cat implements Animal {
  animal: String
  name: String!
  paws: String!
}

type Query {
  agent(id: ID!): User!
  agents(name: String, age: Int): [User!]!
  cars: [String!]!
  msg(values: [String!]!): String
  posts: [Post!]!
  post(id: ID!): Post!
  pictures: [Picture!]!
  getAnimal: Animal!
}
type User {
  id: ID
  name: String
  age: Int
  married: Boolean
  average: Float
  status: UserStatus!
  posts: [Post!]!
  pictures: [Picture!]!
}
enum UserStatus {
  active
  not_active
  trainee
  guest
}
type Post {
  id: ID!
  title: String!
  content: String!
  author: User
  picture: Picture!
}
type Picture {
  id: ID!
  path: String
  author: User
  post: Post!
}
type Mutation {
  createUser(data: createUserInput): User!
  createPost(title: String!, content: String!, author: ID!): Post!
  deletePost(id: ID!): Boolean!
  deleteUser(id: ID!): Boolean!
  updateUser(
    id: ID!
    name: String
    age: Int
    married: Boolean
    status: UserStatus
  ): User!
}
input createUserInput {
  name: String
  age: Int
  married: Boolean
  status: UserStatus
}
